from unit_test import mentors_name, course, all_names, unique_name, popular_names, result, names_code, result_codes
from YaDiskTest import YaDiskAPI as Ya
from selenium_test import sign_in_yandex
import requests

def test_mentors_name():
    assert mentors_name() == [['Евгений', 'Олег', 'Дмитрий', 'Кирилл', 'Александр', 'Александр', 'Александр', 'Антон', 'Максим', 'Елена', 'Азамат', 'Роман'], 
                              ['Филипп', 'Анна', 'Иван', 'Анатолий', 'Юрий', 'Илья', 'Иван', 'Ринат', 'Вадим', 'Тимур', 'Максим', 'Никита', 'Алексей', 'Денис', 'Антон', 'Сергей', 'Максим', 'Евгений', 'Константин', 'Сергей', 'Павел'], 
                              ['Евгений', 'Олег', 'Александр', 'Александр', 'Кирилл', 'Александр', 'Роман', 'Адилет', 'Александр', 'Алена', 'Денис', 'Владимир', 'Эдгар', 'Евгений', 'Максим', 'Елена'], 
                              ['Владимир', 'Эдгар', 'Евгений', 'Валерий', 'Татьяна', 'Александр', 'Александр', 'Алена', 'Александр', 'Денис', 'Николай', 'Михаил']], 'Должен получиться список с 4 списками внутри. В каждом списке должны быть только имена менторов!'
    
def test_course():
    assert course() == "На курсах 'Python-разработчик с нуля' и 'Java-разработчик с нуля' преподают: Антон, Евгений, Максим\nНа курсах 'Python-разработчик с нуля' и 'Fullstack-разработчик на Python' преподают: Александр, Евгений, Елена, Кирилл, Максим, Олег, Роман\nНа курсах 'Python-разработчик с нуля' и 'Frontend-разработчик с нуля' преподают: Александр, Евгений\nНа курсах 'Java-разработчик с нуля' и 'Fullstack-разработчик на Python' преподают: Денис, Евгений, Максим\nНа курсах 'Java-разработчик с нуля' и 'Frontend-разработчик с нуля' преподают: Денис, Евгений\nНа курсах 'Fullstack-разработчик на Python' и 'Frontend-разработчик с нуля' преподают: Александр, Алена, Владимир, Денис, Евгений, Эдгар", 'В решении пока что есть ошибки. Попробуйте снова, у вас всё полуичтся! :)'

def test_all_names():
    assert all_names() == ['Евгений', 'Олег', 'Дмитрий', 'Кирилл', 'Александр', 'Александр', 'Александр', 'Антон', 'Максим', 'Елена', 'Азамат', 'Роман', 'Филипп', 'Анна', 'Иван', 'Анатолий', 'Юрий', 
'Илья', 'Иван', 'Ринат', 'Вадим', 'Тимур', 'Максим', 'Никита', 'Алексей', 'Денис', 'Антон', 'Сергей', 'Максим', 'Евгений', 'Константин', 'Сергей', 'Павел', 'Евгений', 'Олег', 'Александр', 'Александр', 'Кирилл', 'Александр', 'Роман', 'Адилет', 'Александр', 'Алена', 'Денис', 'Владимир', 'Эдгар', 'Евгений', 'Максим', 'Елена', 'Владимир', 'Эдгар', 
'Евгений', 'Валерий', 'Татьяна', 'Александр', 'Александр', 'Алена', 'Александр', 'Денис', 'Николай', 'Михаил'], 'Должен получиться единый список состоящий только из имён менторов!'
        
def test_unique_name():
    assert unique_name() == {'Филипп', 'Иван', 'Анна', 'Сергей', 'Юрий', 'Владимир', 'Роман', 'Антон', 'Александр', 'Максим', 'Денис', 'Евгений', 'Алена', 'Азамат', 'Константин', 'Адилет', 'Вадим', 'Дмитрий', 'Эдгар', 'Елена', 'Михаил', 'Кирилл', 'Олег', 'Ринат', 'Никита', 'Анатолий', 'Илья', 'Николай', 'Павел', 'Тимур', 'Алексей', 'Татьяна', 'Валерий'}, 'Должно получиться множество из уникальных имен менторов!'

def test_popular_names():
    popular = popular_names()
    for i in popular:
        assert i in [['Елена', 2], ['Олег', 2], ['Александр', 10], ['Антон', 2], ['Роман', 2], ['Татьяна', 1], ['Алена', 2], ['Никита', 1], ['Анна', 1], ['Адилет', 1], ['Юрий', 1], ['Илья', 1], ['Алексей', 1], ['Николай', 1], ['Кирилл', 2], ['Евгений', 5], ['Эдгар', 2], ['Филипп', 1], ['Иван', 2], ['Павел', 1], ['Анатолий', 1], ['Денис', 3], ['Владимир', 2], ['Дмитрий', 1], ['Тимур', 1], ['Константин', 1], ['Азамат', 1], ['Валерий', 1], ['Максим', 4], ['Михаил', 1], ['Ринат', 1], ['Сергей', 2], ['Вадим', 1]], 'Должен получиться список внутри которых список с именем и его количеством'

def test_result():
    assert result() == "Александр: 10 раз(а), Евгений: 5 раз(а), Максим: 4 раз(а)", 'Возможные ошибки: Забыли сортировать по типу большой к меньшему, Нужно выбрать первые 3 вхождения.'

def test_names_code():
    test_ = names_code()
    l = [0,7,3,2,3,6,3,2,5,2]
    for n, i in enumerate(test_):
        assert len(i) == l[n], 'В списке не соответствует количество имен!'

def test_result_code():
    g = result_codes().split('\n')
    assert len(g) == 9, 'Ответ не соответсвует ожиданиям. Наверное у вас добавился список с 0 индексом. Должны быть списки с индексом от 1 по 9.'

def test_disk_create_file():
    '''Не забудьте ввести ваш "poligon" и название "file", отправленную на создания.'''
    poligon = ''
    file = ''
    url = 'https://cloud-api.yandex.net/v1/disk/resources'
    param = {'path': f"{file}"}
    head = {'Authorization': f'OAuth {poligon}'}
    response = requests.get(url=url, params=param, headers=head).status_code
    assert response != 404, 'Не удалось найти запрошенный ресурс.'
    assert response != 401, 'Вы не авторизованы'
    assert response != 400, 'Некорректные данные.'
    assert response not in [406, 413, 423, 429], 'Ошибка клиента.'
    assert response != 503, 'Сервис временно не доступен!'
    assert response == 200

def test_selenium():
    '''Введите свои loggin и password'''
    loggin = ''
    password = ''
    sign_in = sign_in_yandex(loggin, password)
    assert sign_in.current_url == 'https://passport.yandex.ru/auth/welcome', 'Неверный логин или пароль'
